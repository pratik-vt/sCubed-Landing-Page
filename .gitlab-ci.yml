stages:
  - build
  - deploy

# --------------------
# DEPLOY TO EC2 (STRAPI)
# --------------------
#deploy_to_ec2:
#  stage: deploy
#  tags:
#    - docker-int-ha
#  image: dockernetzwelt/gitlab-runner:base_common
#  script:
#    - rsync -aurvz -e 'ssh -o StrictHostKeyChecking=no -p 22' --delete --stats --exclude-from=deployment-exclude-list.txt . $strapi_dev_user@$strapi_dev_host:$strapi_dev_path
#
#    - ssh -p 22 -o StrictHostKeyChecking=no $strapi_dev_user@$strapi_dev_host "
#        export NVM_DIR=\$HOME/.nvm &&
#        source \$NVM_DIR/nvm.sh &&
#        cd $strapi_dev_path/apps/cms &&
#        echo 'DATABASE_CLIENT=$DATABASE_CLIENT' > .env &&
#        echo 'DATABASE_HOST=$DATABASE_HOST' >> .env &&
#        echo 'DATABASE_PORT=$DATABASE_PORT' >> .env &&
#        echo 'DATABASE_NAME=$DATABASE_NAME' >> .env &&
#        echo 'DATABASE_USERNAME=$DATABASE_USERNAME' >> .env &&
#        echo 'DATABASE_PASSWORD=$DATABASE_PASSWORD' >> .env &&
#        echo 'DATABASE_SSL=$DATABASE_SSL' >> .env &&
#        echo 'DATABASE_SCHEMA=$DATABASE_SCHEMA' >> .env &&
#        echo 'APP_KEYS=$APP_KEYS' >> .env &&
#        echo 'API_TOKEN_SALT=$API_TOKEN_SALT'  >> .env &&
#        echo 'ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET' >> .env &&
#        echo 'TRANSFER_TOKEN_SALT=$TRANSFER_TOKEN_SALT' >> .env &&
#        npm install &&
#        pm2 restart strapi-dev || pm2 start npm --name strapi-dev -- run develop
#      "
#  only:
#    - develop
#
# --------------------
# BUILD STAGE
# --------------------
build_app:
  stage: build
  tags:
    - docker-int-ha
  image: dockernetzwelt/gitlab-runner:base_common
  before_script:
  - apt-get update && apt-get install -y zip
  - cd /builds/development/scubed-landing-page/apps/web/
  - echo "NEXT_PUBLIC_SITE_URL=$NEXT_PUBLIC_SITE_URL" > .env
  - echo "NEXT_PUBLIC_ADMIN_APP_URL=$NEXT_PUBLIC_ADMIN_APP_URL" >> .env
  - echo "NEXT_PUBLIC_ADMIN_APP_API_URL=$NEXT_PUBLIC_ADMIN_APP_API_URL" >> .env
  - echo "NEXT_PUBLIC_GTM_ID=$NEXT_PUBLIC_GTM_ID" >> .env
  - echo "NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION=$NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION" >> .env
  - echo "NEXT_PUBLIC_FACEBOOK_URL=$NEXT_PUBLIC_FACEBOOK_URL" >> .env
  - echo "NEXT_PUBLIC_INSTAGRAM_URL=$NEXT_PUBLIC_INSTAGRAM_URL" >> .env
  - echo "NEXT_PUBLIC_YOUTUBE_URL=$NEXT_PUBLIC_YOUTUBE_URL" >> .env
  - echo "NEXT_PUBLIC_LINKEDIN_URL=$NEXT_PUBLIC_LINKEDIN_URL" >> .env
  - echo "NEXT_PUBLIC_PHONE_NUMBER=$NEXT_PUBLIC_PHONE_NUMBER" >> .env
  - echo "NEXT_PUBLIC_EMAIL=$NEXT_PUBLIC_EMAIL" >> .env
  - echo "NEXT_PUBLIC_ADDRESS=$NEXT_PUBLIC_ADDRESS" >> .env
  - echo "NEXT_PUBLIC_CALENDLY_URL=$NEXT_PUBLIC_CALENDLY_URL" >> .env
  script:
    - export NVM_DIR="/home/gitlab-runner/.nvm"
    - source $NVM_DIR/nvm.sh
    - nvm install v22.18.0
    - nvm use v22.18.0
    - npm install -g yarn
    - yarn install
    - yarn build
    # Create dynamic build name with pipeline ID
    - export BUILD_NAME="nextjs-static-${CI_PIPELINE_ID}.zip"
    - zip -r "$BUILD_NAME" /builds/development/scubed-landing-page/apps/web/out/
  artifacts:
    paths:
      - nextjs-static-*.zip

# --------------------
# DEPLOY TO AMPLIFY
# --------------------
deploy_to_amplify:
  stage: deploy
  tags:
    - docker-int-ha
  image: dockernetzwelt/gitlab-runner:base_common
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get install -y awscli curl jq unzip
    - mkdir -p ~/.aws
    - |
      cat > ~/.aws/credentials <<EOF
      [scubed-amplify]
      aws_access_key_id = $AWS_ACCESS_KEY_ID
      aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
      EOF
    - |
      cat > ~/.aws/config <<EOF
      [scubed-amplify]
      region = $AWS_DEFAULT_REGION
      output = json
      EOF
    - export BUILD_NAME="nextjs-static-${CI_PIPELINE_ID}.zip"

  script:
    - DEPLOYMENT_INFO=$(aws amplify create-deployment --app-id "$AMPLIFY_APP_ID" --branch-name "$AMPLIFY_BRANCH_NAME" --profile scubed-amplify)
    - JOB_ID=$(echo "$DEPLOYMENT_INFO" | jq -r '.jobId')
    - UPLOAD_URL=$(echo "$DEPLOYMENT_INFO" | jq -r '.zipUploadUrl')

    - curl -T "$BUILD_NAME" "$UPLOAD_URL"

    - aws amplify start-deployment --app-id "$AMPLIFY_APP_ID" --branch-name "$AMPLIFY_BRANCH_NAME" --job-id "$JOB_ID" --profile scubed-amplify

  dependencies:
    - build_app
  only:
    - develop



